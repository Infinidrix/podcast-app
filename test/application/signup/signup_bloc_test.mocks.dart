// Mocks generated by Mockito 5.0.15 from annotations
// in podcast_app/test/application/signup/signup_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:podcast_app/data_provider/login/ilogin_provider.dart' as _i2;
import 'package:podcast_app/models/LoginDtoModel.dart' as _i6;
import 'package:podcast_app/models/user_login/user_login.dart' as _i7;
import 'package:podcast_app/repository/login_repository.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeILoginProvider_0 extends _i1.Fake implements _i2.ILoginProvider {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i4.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ILoginProvider get loginDataProvider =>
      (super.noSuchMethod(Invocation.getter(#loginDataProvider),
          returnValue: _FakeILoginProvider_0()) as _i2.ILoginProvider);
  @override
  _i5.Future<_i3.Either<String, _i6.LoginDtoModel>> Login(
          String? email, String? password) =>
      (super.noSuchMethod(Invocation.method(#Login, [email, password]),
              returnValue: Future<_i3.Either<String, _i6.LoginDtoModel>>.value(
                  _FakeEither_1<String, _i6.LoginDtoModel>()))
          as _i5.Future<_i3.Either<String, _i6.LoginDtoModel>>);
  @override
  _i5.Future<_i7.UserLogin?> getPersistedUserCredOrNot() =>
      (super.noSuchMethod(Invocation.method(#getPersistedUserCredOrNot, []),
              returnValue: Future<_i7.UserLogin?>.value())
          as _i5.Future<_i7.UserLogin?>);
  @override
  String toString() => super.toString();
}
